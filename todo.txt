1. "searchAround" - runs a perimeter search around the input search location until it stops finding values

2. "getZoomRadius" - runs a search, reports zoom width, then measures the distance between the western and eastern most longitude of any returned point. Does the same for north/south. Repeats at 1-2 other zoom widths. Extrapolate from data to estimate the width of the lens. Lens width should be stored in a database and regularly reassessed, perhaps once every 2 months.

For the uh, ones that dont return long/lat but rather street address: Geocode 30 of the results. Get long/lat from those. Min/max it.

3a. Reuse Dijkstra's code for the searchAround in step 1.
3b. Establish a shared MongoDB db (shared?) for the scrapers to report "yes, apartments exist in this area" or "no apartments found here."

4. Establish a task queue for searchAround. There should only ever be a few entries. When a quadrant is entered, add a task for the surrounding quadrants. When a quadrant is finished, delete the entry for that quadrant. That way, if the application crashes mid-way through, it can start up again and start from the task queue.

5. I must discover a way to get 80% of the results for a given area. I don't need to get 100% and hit their API 22 times if I can get 80% by hitting their API 4 times.

6. Alternatively, what defines "enough" apartments? Is it 100 apartments for every active gym? Perhaps I should just test and figure it out.